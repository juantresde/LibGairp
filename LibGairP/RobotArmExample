//
//  main.cpp
//  SimpleWindow
//
//  Created by Silencer on 10/31/13.
//  Copyright (c) 2013 0Silencer. All rights reserved.
//

#include <iostream>
#include <GLUT/GLUT.h>

#ifdef MacOSX
#include "LibGairP.h"
#include "RobotArm.h"
#else
#include "LibGairP\LibGairP.h"
#include "LibGairP\RobotArm.h"
#endif

Light light;

Floor iataki;
RobotArm robotArm;
double currad = 1, radius = 4;
Vector3D cameraVector;
vector<DrawableObject*> objects;
Vector3D moveVector;
int currentPickedupObjectIndex;

bool taken;

void init () {
    glClearColor(1, 1, 1, 1);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_SMOOTH);
    glShadeModel(GL_SMOOTH);
    glEnable(GL_LIGHTING);
    glEnable(GL_NORMALIZE);
}

void reshape(int w, int h) {
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60,w/h,1,500);
    
    gluLookAt(cameraVector.x(), cameraVector.y() , cameraVector.z(), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 );
    
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void redraw() {
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glPushMatrix();
    
    light.updateLight();
    
    iataki.draw();
    robotArm.draw();
    forinc(i, 0, objects.size()-1)
    objects[i]->draw();
    
    glPopMatrix();
    glutSwapBuffers();
}

void updateDisplay() {
    reshape(800, 800);
    redraw();
}

void createObjects () {
    iataki = Floor(10, 10, 1,RedColor, PewterMaterial);
    
    cameraVector = Vector3D(cos(currad) * radius,
                            3,
                            sin(currad) * radius);
    
    Cube * cube1 = new Cube(0.3, 0.3, 0.3, GreenColor, SilverMaterial);
    cube1->translate(0, 0.15, 1.6);
    Cube * cube2 = new Cube(0.3, 0.3, 0.3, YellowColor, SilverMaterial);
    cube2->translate(0, 0.15, -1.6);
    Sphere * sphere1 = new Sphere(0.3, 10, 10, BlueColor, GoldMaterial);
    sphere1->translate(1.5, 0.4, 0);
    Sphere * sphere2 = new Sphere(0.3, 10, 10, RedColor, PewterMaterial);
    sphere2->translate(-1.5, 0.4, 0);
    objects.push_back(cube1);
    objects.push_back(cube2);
    objects.push_back(sphere1);
    objects.push_back(sphere2);
    
    Vector4D ambient = Vector4D(0.2, 0.14, 0.39, 1.0);
    Vector4D diffuse = Vector4D(0.6, 0.6, 0.6, 1.0 );
    Vector4D specular = Vector4D(0.5, 0.7, 0.3, 1.0 );
    
    light = Light(Material(ambient,diffuse,specular,0.0),Vector3D(0,0,1));
    light.enabled = true;
}

void handleKeyPress(unsigned char c, int x, int y) {
    if (c == 'a')
        robotArm.rotate(0, 0, AngleToRadian(5));
    if (c == 's')
        robotArm.rotate(0, 0, AngleToRadian(-5));
    if (c == 'd')
        robotArm.part1.rotate(0,AngleToRadian(5), 0);
    if (c == 'f')
        robotArm.part1.rotate(0,AngleToRadian(-5), 0);
    if (c == 'q')
        robotArm.part1.part2.rotate(0,AngleToRadian(5), 0);
    if (c == 'w')
        robotArm.part1.part2.rotate(0,AngleToRadian(-5), 0);
    if (c == 'z') {
        currad -= AngleToRadian(5);
        cameraVector.x() = cos(currad) * radius;
        cameraVector.z() = sin(currad) * radius;
        updateDisplay();
    }
    if (c == 'x') {
        currad += AngleToRadian(5);
        cameraVector.x() = cos(currad) * radius;
        cameraVector.z() = sin(currad) * radius;
        updateDisplay();
    }
    if (c == 'c') {
        cameraVector.y() += 0.2;
        updateDisplay();
    }
    if (c == 'v') {
        cameraVector.y() -= 0.2;
        updateDisplay();
    }
    if (c == 'b') {
        radius += 0.2;
        cameraVector.x() = cos(currad) * radius;
        cameraVector.z() = sin(currad) * radius;
        updateDisplay();
    }
    if (c == 'n') {
        radius -= 0.2;
        cameraVector.x() = cos(currad) * radius;
        cameraVector.z() = sin(currad) * radius;
        updateDisplay();
    }
    if (c == 'e') {
        robotArm.part1.part2.finger1.rotate(0, AngleToRadian(5), 0);
        robotArm.part1.part2.finger2.rotate(0, AngleToRadian(5), 0);
    }
    if (c == 'r') {
        robotArm.part1.part2.finger1.rotate(0, AngleToRadian(-5), 0);
        robotArm.part1.part2.finger2.rotate(0, AngleToRadian(-5), 0);
    }
    if (c == 't') {
        if (taken) {
            taken = false;
        }
        else {
            forinc(i,0 , objects.size()-1) {
                DrawableObject * object = objects[i];
                Vector3D center = convertVectorToObjectSpace(object->center, object->transform);
                Matrix4 objectSpace = robotArm.getObjectSpace();
                Vector3D p = convertVectorToObjectSpace(object->center,objectSpace);
                p = center - p;
                moveVector = Vector3D(0,0.4,0);
                if (p.length() <= 0.6) {
                    taken = true;
                    currentPickedupObjectIndex = i;
                    break;
                }
                
            }
        }
    }
    if (taken) {
        Matrix4 objectSpace = robotArm.getObjectSpace();
        DrawableObject * object = objects[currentPickedupObjectIndex];
        object->transform = Matrix4().translationMatrix(moveVector.x(), moveVector.y(), moveVector.z()) * objectSpace;
    }
    if (c == 27)
        exit(0);
}

int main(int argc, char * argv[]) {
    createObjects();
    
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_DEPTH);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(400, 400);
    glutCreateWindow("Robor Arm Example");
    
    init();
    glutDisplayFunc(redraw);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(handleKeyPress);
    glutIdleFunc(redraw);
    glutMainLoop();
    
    return 0;
}
